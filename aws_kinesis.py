# -*- coding: utf-8 -*-
"""AWS Kinesis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-1fMIZe000Q2PljGZ50MWki6I6cuB3f-
"""

!pip install boto3

import boto3

# Set up AWS credentials (You can also use environment variables)
aws_access_key = "AWS_ACCESS_KEY" (Removed my secret key and access key for security reasons)
aws_secret_key = "AWS_SECRET_KEY"
aws_region = "us-east-1"

# Initialize Boto3 client
kinesis_client = boto3.client(
    "kinesis",
    aws_access_key_id=aws_access_key,
    aws_secret_access_key=aws_secret_key,
    region_name=aws_region
)

print("AWS Kinesis client successfully connected!")

import json
import time
from datetime import datetime, timezone

# Define Kinesis Stream Name
STREAM_NAME = "stock_price_stream"

# Simulated stock prices
stock_prices = [
    {"stock": "AAPL", "price": 150},
    {"stock": "AAPL", "price": 152},
    {"stock": "AAPL", "price": 149},
    {"stock": "TSLA", "price": 620},
    {"stock": "TSLA", "price": 615},
]

# Publish events to Kinesis
for stock_data in stock_prices:
    event = {
        "stock": stock_data["stock"],
        "price": stock_data["price"],
        "timestamp": datetime.now(timezone.utc).isoformat()
    }

    # Send event to Kinesis
    kinesis_client.put_record(
        StreamName=STREAM_NAME,
        Data=json.dumps(event),
        PartitionKey=stock_data["stock"]
    )

    print(f"Published: {event}")
    time.sleep(1)  # Simulating live events

def replay_and_recalculate():
    shard_iterator = get_shard_iterator()

    while shard_iterator:
        response = kinesis_client.get_records(ShardIterator=shard_iterator, Limit=100)

        if not response["Records"]:  # ðŸ”´ No more records to process
            print("No more records to process. Exiting...")
            break

        for record in response["Records"]:
            event = json.loads(record["Data"])
            stock = event["stock"]
            price = event["price"]

            # Recalculate moving average
            corrected_avg = calculate_moving_average(stock, price)

            print(f"Reprocessed {stock}: New Moving Avg = {corrected_avg}")

        shard_iterator = response.get("NextShardIterator")

        if not shard_iterator:  # ðŸ”´ If no more iterators, exit loop
            print("No more shard iterators. Exiting...")
            break

        time.sleep(1)

# Run the replay function
replay_and_recalculate()

RESULT_STREAM_NAME = "corrected_stock_price_stream"
def publish_corrected_results():
    shard_iterator = get_shard_iterator()

    while shard_iterator:
        response = kinesis_client.get_records(ShardIterator=shard_iterator, Limit=100)

        if not response["Records"]:  # ðŸ”´ No new data available
            print("No more records to process. Exiting...")
            break

        for record in response["Records"]:
            event = json.loads(record["Data"])
            stock = event["stock"]
            price = event["price"]
            timestamp = event["timestamp"]

            # Recalculate moving average
            corrected_avg = calculate_moving_average(stock, price)

            # Publish corrected result
            corrected_data = {
                "stock": stock,
                "corrected_moving_avg": corrected_avg,
                "timestamp": timestamp
            }

            kinesis_client.put_record(
                StreamName=RESULT_STREAM_NAME,
                Data=json.dumps(corrected_data),
                PartitionKey=stock
            )

            print(f"Published Corrected Data: {corrected_data}")

        shard_iterator = response.get("NextShardIterator")

        if not shard_iterator:  # ðŸ”´ Stop if there is no next iterator
            print("No more shard iterators. Exiting...")
            break

        time.sleep(1)

# Run the function
publish_corrected_results()